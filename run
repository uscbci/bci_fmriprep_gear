#! /bin/bash
#
#


################################################################################
# DEFINE VARIABLES

FLYWHEEL_BASE=/flywheel/v0
MANIFEST_FILE=$FLYWHEEL_BASE/manifest.json
CONFIG_FILE=$FLYWHEEL_BASE/config.json
ANALYSIS_ID=$(jq -r '.destination.id' $CONFIG_FILE)
INPUT_DIR=$FLYWHEEL_BASE/input
GEAR_OUTPUT_DIR=$FLYWHEEL_BASE/output
FMRIPREP_OUTPUT_DIR=$GEAR_OUTPUT_DIR/"$ANALYSIS_ID"
WORKING_DIR=$GEAR_OUTPUT_DIR/"$ANALYSIS_ID"_work
LICENSE_FILE=/opt/freesurfer/license.txt
FREESURFER_LICENSE_DIR=$FLYWHEEL_BASE
BIDS_DIR=$INPUT_DIR/bids_dataset
CONTAINER='[flywheel/fmriprep]'


################################################################################
# DISPLAY FMRIPREP DOCKERFILE FOR BUILD INFO

echo -e "$CONTAINER BEGIN FMRIPREP DOCKERFILE\n"
cat ${FLYWHEEL_BASE}/*Dockerfile
echo -e "$CONTAINER END FMRIPREP DOCKERFILE \n"


################################################################################
# CONFIGURE ENV

source ${FLYWHEEL_BASE}/docker-env.sh


##############################################################################
# Parse configuration

function parse_config {

  CONFIG_FILE=$FLYWHEEL_BASE/config.json
  MANIFEST_FILE=$FLYWHEEL_BASE/manifest.json

  if [[ -f $CONFIG_FILE ]]; then
    echo "$(cat $CONFIG_FILE | jq -r '.config.'$1)"
  else
    CONFIG_FILE=$MANIFEST_FILE
    echo "$(cat $MANIFEST_FILE | jq -r '.config.'$1'.default')"
  fi
}

config_save_outputs="$(parse_config 'save_outputs')"
config_save_intermediate_work="$(parse_config 'save_intermediate_work')"
config_intermediate_files="$(parse_config 'intermediate_files')"
config_intermediate_folders="$(parse_config 'intermediate_folders')"


##################
# BIDS Options
config_skip_bids_validation="$(parse_config 'skip_bids_validation')"
if [[ $config_skip_bids_validation == 'false' ]]; then
  skip_bids_validation_FLAG=''
else
  skip_bids_validation_FLAG='--skip-bids-validation'
fi

config_task_id="$(parse_config 'task_id')"
if [[ $config_task_id == '' ]]; then
  task_id_FLAG=''
else
  task_id_FLAG='--task-id '${config_task_id}
fi

config_echo_idx="$(parse_config 'echo_idx')"
if [[ $config_echo_idx == '' ]]; then
  echo_idx_FLAG=''
else
  echo_idx_FLAG='--echo-idx '${config_echo_idx}
fi

##################
# Performance Options
config_anat_only="$(parse_config 'anat_only')"
if [[ $config_anat_only == 'false' ]]; then
  anat_only_FLAG=''
else
  anat_only_FLAG='--anat-only'
fi

config_ignore_aroma_denoising_errors="$(parse_config 'ignore_aroma_denoising_errors')"
if [[ $config_ignore_aroma_denoising_errors == 'false' ]]; then
  ignore_aroma_denoising_errors_FLAG=''
else
  ignore_aroma_denoising_errors_FLAG='--ignore-aroma-denoising-errors'
fi



##################
# Workflow Options
config_ignore="$(parse_config 'ignore')"
config_longitudinal="$(parse_config 'longitudinal')"
config_t2s_coreg="$(parse_config 't2s_coreg')"
config_bold2t1w_dof="$(parse_config 'bold2t1w_dof')"
config_output_space="$(parse_config 'output_space')"
config_force_bbr="$(parse_config 'force_bbr')"
config_force_no_bbr="$(parse_config 'force_no_bbr')"
config_template="$(parse_config 'template')"
config_template_resampling_grid="$(parse_config 'template_resampling_grid')"
config_medial_surface_nan="$(parse_config 'medial_surface_nan')"


template_FLAG='--template '${config_template}
template_resampling_grid_FLAG='--template-resampling-grid '${config_template_resampling_grid}
bold2t1w_dof_FLAG='--bold2t1w-dof '${config_bold2t1w_dof}
output_space_FLAG='--output-space '${config_output_space}

if [[ $config_ignore == '' ]]; then
  ignore_FLAG=''
else
  ignore_FLAG='--ignore '${config_ignore}
fi

if [[ $config_longitudinal == 'false' ]]; then
  longitudinal_FLAG=''
else
  longitudinal_FLAG='--longitudinal'
fi

if [[ $config_t2s_coreg == 'false' ]]; then
  t2s_coreg_FLAG=''
else
  t2s_coreg_FLAG='--t2s-coreg'
fi

if [[ $config_force_bbr == 'false' ]]; then
  force_bbr_FLAG=''
else
  force_bbr_FLAG='--force-bbr'
fi

if [[ $config_force_no_bbr == 'false' ]]; then
  force_no_bbr_FLAG=''
else
  force_no_bbr_FLAG='--force-no-bbr'
fi

if [[ $config_medial_surface_nan == 'false' ]]; then
  medial_surface_nan_FLAG=''
else
  medial_surface_nan_FLAG='--medial-surface-nan'
fi


##################
# Specific options for ICA Aroma
config_use_aroma="$(parse_config 'use_aroma')"

if [[ $config_use_aroma == 'false' ]]; then
  use_aroma_FLAG=''
else
  use_aroma_FLAG='--use-aroma'
fi

config_aroma_melodic_dimensionality="$(parse_config 'aroma_melodic_dimensionality')"
aroma_melodic_dimensionality_FLAG='--aroma-melodic-dimensionality '"${config_aroma_melodic_dimensionality}"


##################
# Specific options for ANTs registrations
config_skull_strip_template="$(parse_config 'skull_strip_template')"
config_skull_strip_fixed_seed="$(parse_config 'skull_strip_fixed_seed')"

skull_strip_template_FLAG='--skull-strip-template '${config_skull_strip_template}

if [[ $config_skull_strip_fixed_seed == 'false' ]]; then
  skull_strip_fixed_seed_FLAG=''
else
  skull_strip_fixed_seed_FLAG='--skull-strip-fixed-seed'
fi

##################
# Specific options for fieldmaps
config_fmap_bspline="$(parse_config 'fmap_bspline')"
config_fmap_no_demean="$(parse_config 'fmap_no_demean')"

if [[ $config_fmap_bspline == 'false' ]]; then
  fmap_bspline_FLAG=''
else
  fmap_bspline_FLAG='--fmap-bspline'
fi

if [[ $config_fmap_no_demean == 'false' ]]; then
  fmap_no_demean_FLAG=''
else
  fmap_no_demean_FLAG='--fmap-no-demean'
fi

##################
# Specific options for SyN distortion correction
config_use_syn_sdc="$(parse_config 'use_syn_sdc')"
config_force_syn="$(parse_config 'force_syn')"

if [[ $config_use_syn_sdc == 'false' ]]; then
  use_syn_sdc_FLAG=''
else
  use_syn_sdc_FLAG='--use-syn-sdc'
fi

if [[ $config_force_syn == 'false' ]]; then
  force_syn_FLAG=''
else
  force_syn_FLAG='--force-syn'
fi

##################
# Surface preprocessing options
config_no_submm_recon="$(parse_config 'no_submm_recon')"
config_cifti_output="$(parse_config 'cifti_output')"
config_freesurfer="$(parse_config 'fs_no_reconall')"

if [[ $config_no_submm_recon == 'false' ]]; then
  no_submm_recon_FLAG=''
else
  no_submm_recon_FLAG='--no-submm-recon'
fi

if [[ $config_cifti_output == 'false' ]]; then
  cifti_output_FLAG=''
else
  cifti_output_FLAG='--cifti-output'
fi

# Boolean parsing of freesurfer config option
if [[ $config_freesurfer == 'false' ]]; then
  freesurfer_FLAG=''
else
  freesurfer_FLAG='--fs-no-reconall'
fi


##################
# Other preprocessing options
config_no_track="$(parse_config 'no_track')"
if [[ $config_no_track == 'false' ]]; then
  no_track_FLAG=''
else
  no_track_FLAG='--no-track'
fi


################################################################################
# Freesurfer License

########################

echo "$CONTAINER  Attempting to generate license file..."

need_license=1

# OPTION 1:  User-Provided license file

ls $FREESURFER_LICENSE_DIR | cat

if [[ -d "$FREESURFER_LICENSE_DIR" ]]; then
  echo "found" ${FREESURFER_LICENSE_DIR}
  fs_file="$FREESURFER_LICENSE_DIR/license.txt"
  echo "found fs_file " ${fs_file}
  if [[ -n "$fs_file" ]]; then
    echo "    -->Generating FREESURFER LICENSE file from $fs_file"
    cp "$fs_file" ${LICENSE_FILE}
    need_license=0
  fi
fi

# Other options handled in parse config...
if [[ $need_license == 1 ]]; then
  echo "running fs_license.py"
  /usr/local/miniconda/bin/python $FLYWHEEL_BASE/fs_license.py --json_file=${CONFIG_FILE}
  if [[ $? != 0 ]]; then
    echo "$CONTAINER  Problem generating FreeSurfer License! Exiting(1)"
    exit 1
  fi
fi


################################################################################
# CREATE A BIDS FORMATTED DIRECTORY
#   Use Python SDK to accomplish this task
# if [[ ! -d $INPUT_DIR/bids_dataset ]]; then
# (JK: even if there is a dir there we want to override it with the create_archive one)
/usr/local/miniconda/bin/python ${FLYWHEEL_BASE}/create_archive.py
if [[ $? != 0 ]]; then
  echo "$CONTAINER  Problem creating archive! Exiting (1)"
  exit 1
fi
# else
#     echo -e "Found existing data!!!"
# fi


################################################################################
# VALIDATE INPUT DATA
# Check if the input directory is not empty
if [[ "$(ls -A $INPUT_DIR)" ]] ; then
    echo "$CONTAINER  Starting..."
else
    echo "Input directory is empty: $INPUT_DIR"
    exit 1
fi

# Show the contents of the BIDS directory
ls -R ${BIDS_DIR}


################################################################################
# RUN FMRIPREP
echo -e "RUNNING COMMAND: \n
      /usr/local/miniconda/bin/fmriprep \
      ${BIDS_DIR} \
      ${FMRIPREP_OUTPUT_DIR} \
      participant \
      ${skip_bids_validation_FLAG} \
      ${task_id_FLAG} \
      ${echo_idx_FLAG} \
      ${anat_only_FLAG} \
      ${ignore_aroma_denoising_errors_FLAG} \
      ${ignore_FLAG} \
      ${longitudinal_FLAG} \
      ${t2s_coreg_FLAG} \
      ${bold2t1w_dof_FLAG} \
      ${output_space_FLAG} \
      ${force_bbr_FLAG} \
      ${force_no_bbr_FLAG} \
      ${template_FLAG} \
      ${template_resampling_grid_FLAG} \
      ${medial_surface_nan_FLAG} \
      ${use_aroma_FLAG} \
      ${aroma_melodic_dimensionality_FLAG} \
      ${skull_strip_template_FLAG} \
      ${skull_strip_fixed_seed_FLAG} \
      ${fmap_bspline_FLAG} \
      ${fmap_no_demean_FLAG} \
      ${use_syn_sdc_FLAG} \
      ${force_syn_FLAG} \
      ${no_submm_recon_FLAG} \
      ${cifti_output_FLAG} \
      ${freesurfer_FLAG} \
      -w ${WORKING_DIR} \
      ${no_track_FLAG}"

time /usr/local/miniconda/bin/fmriprep \
      ${BIDS_DIR} \
      ${FMRIPREP_OUTPUT_DIR} \
      participant \
      ${skip_bids_validation_FLAG} \
      ${task_id_FLAG} \
      ${echo_idx_FLAG} \
      ${anat_only_FLAG} \
      ${ignore_aroma_denoising_errors_FLAG} \
      ${ignore_FLAG} \
      ${longitudinal_FLAG} \
      ${t2s_coreg_FLAG} \
      ${bold2t1w_dof_FLAG} \
      ${output_space_FLAG} \
      ${force_bbr_FLAG} \
      ${force_no_bbr_FLAG} \
      ${template_FLAG} \
      ${template_resampling_grid_FLAG} \
      ${medial_surface_nan_FLAG} \
      ${use_aroma_FLAG} \
      ${aroma_melodic_dimensionality_FLAG} \
      ${skull_strip_template_FLAG} \
      ${skull_strip_fixed_seed_FLAG} \
      ${fmap_bspline_FLAG} \
      ${fmap_no_demean_FLAG} \
      ${use_syn_sdc_FLAG} \
      ${force_syn_FLAG} \
      ${no_submm_recon_FLAG} \
      ${cifti_output_FLAG} \
      ${freesurfer_FLAG} \
      -w ${WORKING_DIR} \
      ${no_track_FLAG}


FMRIPREP_EXITSTATUS=$?


################################################################################
# CLEANUP OUTPUTS

if [[ $FMRIPREP_EXITSTATUS == 0 ]] ; then

  # Convert html to standalone zip archive
  html_file=$(find "$FMRIPREP_OUTPUT_DIR"/fmriprep/ -name "sub-*.html")
  SUB_ID=$(basename "$html_file" .html)

  if [[ -n "$html_file" ]]; then
    echo "$CONTAINER  Converting output html report..."
    output_html_file="$GEAR_OUTPUT_DIR"/`basename "$html_file" .html`_"$ANALYSIS_ID".html.zip
    cd $(dirname $html_file)
    cp "$html_file" index.html
    zip -r -q "$output_html_file" \
           index.html \
           "$SUB_ID"/figures && \
        rm index.html
    echo "$CONTAINER  HTML report converted."
  else
    echo "$CONTAINER  no output html report found!"
  fi

  # Look for files/folders to preserve from the working DIRECTORY
  work_file_zip="$GEAR_OUTPUT_DIR"/fmriprep_work_selected_"$SUB_ID"_"$ANALYSIS_ID".zip
  if [[ -n "$config_intermediate_files" ]]; then
    echo "$CONTAINER  Archiving selected intermediate files..."
    cd "$WORKING_DIR"
    for f in "$config_intermediate_files"; do
      zip $work_file_zip `find . -type f -name "$f"`
    done
  fi

  if [[ -n "$config_intermediate_folders" ]]; then
    echo "$CONTAINER  Archiving selected intermediate folders..."
    cd "$WORKING_DIR"
    for f in $config_intermediate_folders; do
      zip $work_file_zip `find . -type d -name "$f"`
    done
  fi

  # Generate zipped output of fmriprep
  cd "$GEAR_OUTPUT_DIR"
  echo "$CONTAINER  generating zip archive from outputs..."
  time zip -q -r "$GEAR_OUTPUT_DIR"/fmriprep_"$SUB_ID"_"$ANALYSIS_ID" $(basename "$FMRIPREP_OUTPUT_DIR")

  if [[ $config_save_intermediate_work == 'true' ]] ; then
    echo "$CONTAINER  generating zip archive from intermediate work files..."
    cd "$GEAR_OUTPUT_DIR"
    time zip -q -r "$GEAR_OUTPUT_DIR"/fmriprep_work_"$SUB_ID"_"$ANALYSIS_ID" $(basename "$WORKING_DIR")
  fi
  chmod -R 777 $GEAR_OUTPUT_DIR

elif [[ $config_save_outputs == 'true' ]] ; then
  echo "$CONTAINER  Error occurred. Config 'save_outputs' set to true. Zipping up outputs."
  cd "$GEAR_OUTPUT_DIR"
  time zip -q -r "$GEAR_OUTPUT_DIR"/debug_fmriprep_"$ANALYSIS_ID"  $(basename "$FMRIPREP_OUTPUT_DIR")
  time zip -q -r "$GEAR_OUTPUT_DIR"/debug_fmriprep_work_"$ANALYSIS_ID" $(basename "$WORKING_DIR")
  chmod -R 777 $GEAR_OUTPUT_DIR

else
  echo "$CONTAINER  Errors encountered during execution. Save outputs config not set. Cleaning up and exiting."
fi

# Clean up
rm -rf "$WORKING_DIR"
rm -rf "$FMRIPREP_OUTPUT_DIR"

echo -e "Wrote: `ls -lh $GEAR_OUTPUT_DIR`"

exit $FMRIPREP_EXITSTATUS
